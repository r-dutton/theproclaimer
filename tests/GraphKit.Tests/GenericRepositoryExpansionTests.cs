using GraphKit.Graph;using GraphKit.Outputs;using Xunit;namespace GraphKit.Tests;public class GenericRepositoryExpansionTests{[Fact]public void ControlledRepository_WriteQuery_Fallback_Expands_When_No_Method_Tagged(){var endpoint=new GraphNode{Id="ep",Type="endpoint.controller",Name="Do",Fqdn="Api.Controller.Do",Assembly="Api",Project="Api",FilePath="Controller.cs",SymbolId="T:Api.Controller.Do",Props=new System.Collections.Generic.Dictionary<string,object>{{"http_method","GET"},{"route","/do"},{"status_codes",new[]{200}}}};var repoInterface=new GraphNode{Id="irepo",Type="app.service",Name="IControlledRepository<Firm>",Fqdn="App.Data.IControlledRepository<Workpapers.Next.DomainModel.Model.Firms.Firm>",Assembly="App",Project="App",FilePath="IControlledRepository.cs",SymbolId="T:App.Data.IControlledRepository`1"};var repoImpl=new GraphNode{Id="repo",Type="app.service",Name="FirmRepository",Fqdn="App.Data.FirmRepository",Assembly="App",Project="App",FilePath="FirmRepository.cs",SymbolId="T:App.Data.FirmRepository",Span=new GraphSpan{StartLine=10,EndLine=80}};var firmEntity=new GraphNode{Id="firm",Type="ef.entity",Name="Firm",Fqdn="App.Domain.Firm",Assembly="App",Project="App",FilePath="Firm.cs",SymbolId="T:App.Domain.Firm",Span=new GraphSpan{StartLine=5,EndLine=120}};var implEdge=new GraphEdge{From=repoInterface.Id,To=repoImpl.Id,Kind="implemented_by",Source="static"};var endpointUsesRepo=new GraphEdge{From=endpoint.Id,To=repoInterface.Id,Kind="uses_service",Source="static",Props=new System.Collections.Generic.Dictionary<string,object>{{"method","WriteQuery"}}}; // Implementation edges without method tagging
var implCallsEntity=new GraphEdge{From=repoImpl.Id,To=firmEntity.Id,Kind="writes_to",Source="static"};var doc=new GraphDocument{Version="1.0",Nodes=new[]{endpoint,repoInterface,repoImpl,firmEntity},Edges=new[]{implEdge,endpointUsesRepo,implCallsEntity}};var flow=FlowBuilder.BuildFlows(doc,n=>true);Assert.Contains("uses_service FirmRepository",flow);Assert.Contains("implementation App.Data.FirmRepository.WriteQuery",flow); // Fallback should broaden expansion
Assert.Contains("writes_to Firm",flow);} }